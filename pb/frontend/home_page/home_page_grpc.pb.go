// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: home_page.proto

package home_page

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HomeService_GetHomepage_FullMethodName          = "/home_page.HomeService/GetHomepage"
	HomeService_GetShowcase_FullMethodName          = "/home_page.HomeService/GetShowcase"
	HomeService_VerifyHomepageStatus_FullMethodName = "/home_page.HomeService/VerifyHomepageStatus"
)

// HomeServiceClient is the client API for HomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeServiceClient interface {
	GetHomepage(ctx context.Context, in *GetHomepageReq, opts ...grpc.CallOption) (*GetHomepageResp, error)
	GetShowcase(ctx context.Context, in *GetShowcaseReq, opts ...grpc.CallOption) (*GetShowcaseResp, error)
	VerifyHomepageStatus(ctx context.Context, in *VerifyHomepageStatusReq, opts ...grpc.CallOption) (*VerifyHomepageStatusResp, error)
}

type homeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeServiceClient(cc grpc.ClientConnInterface) HomeServiceClient {
	return &homeServiceClient{cc}
}

func (c *homeServiceClient) GetHomepage(ctx context.Context, in *GetHomepageReq, opts ...grpc.CallOption) (*GetHomepageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHomepageResp)
	err := c.cc.Invoke(ctx, HomeService_GetHomepage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) GetShowcase(ctx context.Context, in *GetShowcaseReq, opts ...grpc.CallOption) (*GetShowcaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShowcaseResp)
	err := c.cc.Invoke(ctx, HomeService_GetShowcase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeServiceClient) VerifyHomepageStatus(ctx context.Context, in *VerifyHomepageStatusReq, opts ...grpc.CallOption) (*VerifyHomepageStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyHomepageStatusResp)
	err := c.cc.Invoke(ctx, HomeService_VerifyHomepageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeServiceServer is the server API for HomeService service.
// All implementations must embed UnimplementedHomeServiceServer
// for forward compatibility.
type HomeServiceServer interface {
	GetHomepage(context.Context, *GetHomepageReq) (*GetHomepageResp, error)
	GetShowcase(context.Context, *GetShowcaseReq) (*GetShowcaseResp, error)
	VerifyHomepageStatus(context.Context, *VerifyHomepageStatusReq) (*VerifyHomepageStatusResp, error)
	mustEmbedUnimplementedHomeServiceServer()
}

// UnimplementedHomeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHomeServiceServer struct{}

func (UnimplementedHomeServiceServer) GetHomepage(context.Context, *GetHomepageReq) (*GetHomepageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomepage not implemented")
}
func (UnimplementedHomeServiceServer) GetShowcase(context.Context, *GetShowcaseReq) (*GetShowcaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowcase not implemented")
}
func (UnimplementedHomeServiceServer) VerifyHomepageStatus(context.Context, *VerifyHomepageStatusReq) (*VerifyHomepageStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyHomepageStatus not implemented")
}
func (UnimplementedHomeServiceServer) mustEmbedUnimplementedHomeServiceServer() {}
func (UnimplementedHomeServiceServer) testEmbeddedByValue()                     {}

// UnsafeHomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeServiceServer will
// result in compilation errors.
type UnsafeHomeServiceServer interface {
	mustEmbedUnimplementedHomeServiceServer()
}

func RegisterHomeServiceServer(s grpc.ServiceRegistrar, srv HomeServiceServer) {
	// If the following call pancis, it indicates UnimplementedHomeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HomeService_ServiceDesc, srv)
}

func _HomeService_GetHomepage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomepageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).GetHomepage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeService_GetHomepage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).GetHomepage(ctx, req.(*GetHomepageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_GetShowcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowcaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).GetShowcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeService_GetShowcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).GetShowcase(ctx, req.(*GetShowcaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeService_VerifyHomepageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyHomepageStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).VerifyHomepageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeService_VerifyHomepageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).VerifyHomepageStatus(ctx, req.(*VerifyHomepageStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeService_ServiceDesc is the grpc.ServiceDesc for HomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "home_page.HomeService",
	HandlerType: (*HomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHomepage",
			Handler:    _HomeService_GetHomepage_Handler,
		},
		{
			MethodName: "GetShowcase",
			Handler:    _HomeService_GetShowcase_Handler,
		},
		{
			MethodName: "VerifyHomepageStatus",
			Handler:    _HomeService_VerifyHomepageStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "home_page.proto",
}
